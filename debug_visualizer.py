"""
Pipeline 可视化工具 - 生成交互式HTML调试报告
==============================================

功能：
1. 生成美观的HTML调试报告
2. 展示每个步骤的详细信息
3. 提供交互式数据查看
4. 包含质量评估和建议
"""

import os
import json
import logging
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class PipelineVisualizer:
    """Pipeline 可视化器 - 生成HTML报告"""
    
    def __init__(self, debug_output_dir: str = "./debug_output"):
        """
        初始化可视化器
        
        Args:
            debug_output_dir: 调试输出目录
        """
        self.debug_output_dir = debug_output_dir
        
    def generate_html_report(self, debug_results: Dict[str, Any], base_name: str):
        """
        生成HTML调试报告
        
        Args:
            debug_results: 调试结果字典
            base_name: 基础文件名
        """
        html_content = self._create_html_template(debug_results, base_name)
        
        output_path = os.path.join(self.debug_output_dir, f"{base_name}_debug_report.html")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"📊 HTML调试报告已生成: {output_path}")
        return output_path
    
    def _create_html_template(self, debug_results: Dict[str, Any], base_name: str) -> str:
        """创建HTML模板"""
        
        file_info = debug_results.get("file_info", {})
        step_results = debug_results.get("step_results", {})
        
        html = f"""
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pipeline 调试报告 - {file_info.get('file_name', base_name)}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>🔍 Pipeline 调试报告</h1>
            <div class="file-info">
                <h2>📄 {file_info.get('file_name', base_name)}</h2>
                <p><strong>处理时间:</strong> {file_info.get('processing_time', 0):.2f} 秒</p>
                <p><strong>生成时间:</strong> {debug_results.get('timestamp', '')}</p>
            </div>
        </header>
        
        <nav class="nav">
            <h3>📋 步骤导航</h3>
            <ul>
                <li><a href="#overview">概览</a></li>
                <li><a href="#document-loading">文档加载</a></li>
                <li><a href="#chunking">文档分块</a></li>
                <li><a href="#embedding">Embedding</a></li>
                <li><a href="#vector-store">Vector Store</a></li>
                <li><a href="#concept-extraction">概念提取</a></li>
                <li><a href="#concept-merging">概念合并</a></li>
                <li><a href="#evidence-extraction">证据提取</a></li>
                <li><a href="#retrieval">检索测试</a></li>
                <li><a href="#qa-generation">问答生成</a></li>
            </ul>
        </nav>
        
        <main class="main">
            {self._generate_overview_section(step_results)}
            {self._generate_step_sections(step_results)}
        </main>
        
        <footer class="footer">
            <p>Generated by Pipeline Debugger at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
    
    <script>
        {self._get_javascript()}
    </script>
</body>
</html>
"""
        return html
    
    def _get_css_styles(self) -> str:
        """获取CSS样式"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .file-info h2 {
            font-size: 1.5em;
            margin-bottom: 10px;
        }
        
        .nav {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .nav ul {
            list-style: none;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .nav li a {
            display: block;
            padding: 8px 16px;
            background: #f8f9fa;
            color: #495057;
            text-decoration: none;
            border-radius: 5px;
            transition: all 0.3s;
        }
        
        .nav li a:hover {
            background: #007bff;
            color: white;
        }
        
        .main {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .section {
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 1px solid #eee;
        }
        
        .section:last-child {
            border-bottom: none;
        }
        
        .section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8em;
        }
        
        .status-success {
            color: #28a745;
            font-weight: bold;
        }
        
        .status-error {
            color: #dc3545;
            font-weight: bold;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #007bff;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #007bff;
        }
        
        .stat-label {
            color: #6c757d;
            margin-top: 5px;
        }
        
        .details-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        .details-table th,
        .details-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .details-table th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        
        .details-table tr:hover {
            background-color: #f5f5f5;
        }
        
        .collapsible {
            background-color: #f1f1f1;
            color: #444;
            cursor: pointer;
            padding: 18px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            border-radius: 5px;
            margin: 5px 0;
        }
        
        .collapsible:hover {
            background-color: #ddd;
        }
        
        .collapsible.active {
            background-color: #007bff;
            color: white;
        }
        
        .content {
            padding: 0 18px;
            display: none;
            overflow: hidden;
            background-color: #f9f9f9;
            border-radius: 0 0 5px 5px;
        }
        
        .content.show {
            display: block;
            padding: 18px;
        }
        
        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #6c757d;
        }
        
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #20c997);
            transition: width 0.3s ease;
        }
        """
    
    def _generate_overview_section(self, step_results: Dict[str, Any]) -> str:
        """生成概览部分"""
        
        step_names = {
            "document_loading": "📄 文档加载",
            "chunking": "✂️ 文档分块", 
            "embedding": "🔢 Embedding 生成",
            "vector_store": "🗄️ Vector Store 构建",
            "concept_extraction": "🧠 概念提取",
            "concept_merging": "🔗 概念合并",
            "evidence_extraction": "🔍 证据提取",
            "retrieval": "🎯 检索测试",
            "qa_generation": "❓ 问答生成"
        }
        
        total_steps = len(step_names)
        successful_steps = sum(1 for step_key in step_names.keys() 
                             if step_results.get(step_key, {}).get("success", False))
        success_rate = (successful_steps / total_steps) * 100 if total_steps > 0 else 0
        
        overview_html = f"""
        <section id="overview" class="section">
            <h2>📊 处理概览</h2>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{successful_steps}/{total_steps}</div>
                    <div class="stat-label">成功步骤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{success_rate:.1f}%</div>
                    <div class="stat-label">成功率</div>
                </div>
            </div>
            
            <h3>步骤状态</h3>
            <table class="details-table">
                <thead>
                    <tr>
                        <th>步骤</th>
                        <th>状态</th>
                        <th>处理时间</th>
                        <th>详情</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for step_key, step_name in step_names.items():
            step_result = step_results.get(step_key, {})
            success = step_result.get("success", False)
            status_class = "status-success" if success else "status-error"
            status_text = "✅ 成功" if success else "❌ 失败"
            time_taken = step_result.get("processing_time", 0)
            
            overview_html += f"""
                    <tr>
                        <td>{step_name}</td>
                        <td class="{status_class}">{status_text}</td>
                        <td>{time_taken:.2f}s</td>
                        <td><a href="#{step_key.replace('_', '-')}">查看详情</a></td>
                    </tr>
            """
        
        overview_html += """
                </tbody>
            </table>
        </section>
        """
        
        return overview_html
    
    def _generate_step_sections(self, step_results: Dict[str, Any]) -> str:
        """生成各步骤详细部分"""
        
        sections_html = ""
        
        # 文档加载
        doc_result = step_results.get("document_loading", {})
        if doc_result:
            sections_html += self._generate_document_loading_section(doc_result)
        
        # 文档分块
        chunk_result = step_results.get("chunking", {})
        if chunk_result:
            sections_html += self._generate_chunking_section(chunk_result)
        
        # Embedding
        embed_result = step_results.get("embedding", {})
        if embed_result:
            sections_html += self._generate_embedding_section(embed_result)
        
        # Vector Store
        vector_result = step_results.get("vector_store", {})
        if vector_result:
            sections_html += self._generate_vector_store_section(vector_result)
        
        # 概念提取
        concept_result = step_results.get("concept_extraction", {})
        if concept_result:
            sections_html += self._generate_concept_extraction_section(concept_result)
        
        # 概念合并
        merge_result = step_results.get("concept_merging", {})
        if merge_result:
            sections_html += self._generate_concept_merging_section(merge_result)
        
        # 证据提取
        evidence_result = step_results.get("evidence_extraction", {})
        if evidence_result:
            sections_html += self._generate_evidence_extraction_section(evidence_result)
        
        # 检索
        retrieval_result = step_results.get("retrieval", {})
        if retrieval_result:
            sections_html += self._generate_retrieval_section(retrieval_result)
        
        # 问答生成
        qa_result = step_results.get("qa_generation", {})
        if qa_result:
            sections_html += self._generate_qa_generation_section(qa_result)
        
        return sections_html
    
    def _generate_document_loading_section(self, result: Dict[str, Any]) -> str:
        """生成文档加载部分"""
        if not result.get("success"):
            return f"""
            <section id="document-loading" class="section">
                <h2>📄 文档加载</h2>
                <p class="status-error">❌ 失败: {result.get('error', '未知错误')}</p>
            </section>
            """
        
        return f"""
        <section id="document-loading" class="section">
            <h2>📄 文档加载</h2>
            <p class="status-success">✅ 成功</p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{result.get('documents_count', 0)}</div>
                    <div class="stat-label">文档数量</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{result.get('total_characters', 0):,}</div>
                    <div class="stat-label">总字符数</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{result.get('processing_time', 0):.2f}s</div>
                    <div class="stat-label">处理时间</div>
                </div>
            </div>
            
            <button class="collapsible">查看文档详情</button>
            <div class="content">
                <table class="details-table">
                    <thead>
                        <tr>
                            <th>索引</th>
                            <th>文本长度</th>
                            <th>文本预览</th>
                        </tr>
                    </thead>
                    <tbody>
        """
        
        for doc_detail in result.get('document_details', []):
            return f"""
                        <tr>
                            <td>{doc_detail.get('index', 0)}</td>
                            <td>{doc_detail.get('text_length', 0):,}</td>
                            <td>{doc_detail.get('text_preview', '')[:100]}...</td>
                        </tr>
            """
        
        return """
                    </tbody>
                </table>
            </div>
        </section>
        """
    
    def _generate_chunking_section(self, result: Dict[str, Any]) -> str:
        """生成分块部分"""
        if not result.get("success"):
            return f"""
            <section id="chunking" class="section">
                <h2>✂️ 文档分块</h2>
                <p class="status-error">❌ 失败: {result.get('error', '未知错误')}</p>
            </section>
            """
        
        stats = result.get('chunking_stats', {})
        
        return f"""
        <section id="chunking" class="section">
            <h2>✂️ 文档分块</h2>
            <p class="status-success">✅ 成功</p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{result.get('chunks_count', 0)}</div>
                    <div class="stat-label">块数量</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats.get('avg_chunk_length', 0):.0f}</div>
                    <div class="stat-label">平均块长度</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats.get('min_chunk_length', 0)}</div>
                    <div class="stat-label">最小块长度</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats.get('max_chunk_length', 0)}</div>
                    <div class="stat-label">最大块长度</div>
                </div>
            </div>
        </section>
        """
    
    def _generate_concept_extraction_section(self, result: Dict[str, Any]) -> str:
        """生成概念提取部分"""
        if not result.get("success"):
            return f"""
            <section id="concept-extraction" class="section">
                <h2>🧠 概念提取</h2>
                <p class="status-error">❌ 失败: {result.get('error', '未知错误')}</p>
            </section>
            """
        
        stats = result.get('concept_stats', {})
        
        return f"""
        <section id="concept-extraction" class="section">
            <h2>🧠 概念提取</h2>
            <p class="status-success">✅ 成功</p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{result.get('concepts_count', 0)}</div>
                    <div class="stat-label">提取概念数</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats.get('avg_concepts_per_chunk', 0):.1f}</div>
                    <div class="stat-label">平均每块概念数</div>
                </div>
            </div>
        </section>
        """
    
    def _generate_qa_generation_section(self, result: Dict[str, Any]) -> str:
        """生成问答生成部分"""
        if not result.get("success"):
            return f"""
            <section id="qa-generation" class="section">
                <h2>❓ 问答生成</h2>
                <p class="status-error">❌ 失败: {result.get('error', '未知错误')}</p>
            </section>
            """
        
        stats = result.get('qa_stats', {})
        
        return f"""
        <section id="qa-generation" class="section">
            <h2>❓ 问答生成</h2>
            <p class="status-success">✅ 成功</p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{result.get('qa_pairs_count', 0)}</div>
                    <div class="stat-label">问答对数量</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats.get('avg_question_length', 0):.0f}</div>
                    <div class="stat-label">平均问题长度</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats.get('avg_answer_length', 0):.0f}</div>
                    <div class="stat-label">平均答案长度</div>
                </div>
            </div>
            
            <h3>问题类型分布</h3>
            <p>{', '.join(stats.get('question_types', []))}</p>
        </section>
        """
    
    def _generate_embedding_section(self, result: Dict[str, Any]) -> str:
        """生成其他步骤的通用部分"""
        return ""
    
    def _generate_vector_store_section(self, result: Dict[str, Any]) -> str:
        return ""
    
    def _generate_concept_merging_section(self, result: Dict[str, Any]) -> str:
        return ""
    
    def _generate_evidence_extraction_section(self, result: Dict[str, Any]) -> str:
        return ""
    
    def _generate_retrieval_section(self, result: Dict[str, Any]) -> str:
        return ""
    
    def _get_javascript(self) -> str:
        """获取JavaScript代码"""
        return """
        // 折叠面板功能
        document.addEventListener('DOMContentLoaded', function() {
            var coll = document.getElementsByClassName("collapsible");
            for (var i = 0; i < coll.length; i++) {
                coll[i].addEventListener("click", function() {
                    this.classList.toggle("active");
                    var content = this.nextElementSibling;
                    content.classList.toggle("show");
                });
            }
            
            // 平滑滚动
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
        });
        """ 